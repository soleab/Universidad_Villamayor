# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Profesor(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nombre_apellidos: str=None, dni: str=None, fecha_nacimiento: str=None, investigacion: int=None, docencia: int=None, categoria: str=None, departamento: int=None, usuario: str=None, contrasea: str=None, email: str=None):
        """
        Profesor - a model defined in Swagger

        :param nombre_apellidos: The nombre_apellidos of this Profesor.
        :type nombre_apellidos: str
        :param dni: The dni of this Profesor.
        :type dni: str
        :param fecha_nacimiento: The fecha_nacimiento of this Profesor.
        :type fecha_nacimiento: str
        :param investigacion: The investigacion of this Profesor.
        :type investigacion: int
        :param docencia: The docencia of this Profesor.
        :type docencia: int
        :param categoria: The categoria of this Profesor.
        :type categoria: str
        :param departamento: The departamento of this Profesor.
        :type departamento: int
        :param usuario: The usuario of this Profesor.
        :type usuario: str
        :param contrasea: The contrasea of this Profesor.
        :type contrasea: str
        :param email: The email of this Profesor.
        :type email: str
        """
        self.swagger_types = {
            'nombre_apellidos': str,
            'dni': str,
            'fecha_nacimiento': str,
            'investigacion': int,
            'docencia': int,
            'categoria': str,
            'departamento': int,
            'usuario': str,
            'contrasea': str,
            'email': str
        }

        self.attribute_map = {
            'nombre_apellidos': 'NombreApellidos',
            'dni': 'DNI',
            'fecha_nacimiento': 'FechaNacimiento',
            'investigacion': 'Investigacion',
            'docencia': 'Docencia',
            'categoria': 'Categoria',
            'departamento': 'Departamento',
            'usuario': 'Usuario',
            'contrasea': 'Contraseña',
            'email': 'email'
        }

        self._nombre_apellidos = nombre_apellidos
        self._dni = dni
        self._fecha_nacimiento = fecha_nacimiento
        self._investigacion = investigacion
        self._docencia = docencia
        self._categoria = categoria
        self._departamento = departamento
        self._usuario = usuario
        self._contrasea = contrasea
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'Profesor':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profesor of this Profesor.
        :rtype: Profesor
        """
        return deserialize_model(dikt, cls)

    @property
    def nombre_apellidos(self) -> str:
        """
        Gets the nombre_apellidos of this Profesor.

        :return: The nombre_apellidos of this Profesor.
        :rtype: str
        """
        return self._nombre_apellidos

    @nombre_apellidos.setter
    def nombre_apellidos(self, nombre_apellidos: str):
        """
        Sets the nombre_apellidos of this Profesor.

        :param nombre_apellidos: The nombre_apellidos of this Profesor.
        :type nombre_apellidos: str
        """

        self._nombre_apellidos = nombre_apellidos

    @property
    def dni(self) -> str:
        """
        Gets the dni of this Profesor.
        dni del profesor

        :return: The dni of this Profesor.
        :rtype: str
        """
        return self._dni

    @dni.setter
    def dni(self, dni: str):
        """
        Sets the dni of this Profesor.
        dni del profesor

        :param dni: The dni of this Profesor.
        :type dni: str
        """

        self._dni = dni

    @property
    def fecha_nacimiento(self) -> str:
        """
        Gets the fecha_nacimiento of this Profesor.

        :return: The fecha_nacimiento of this Profesor.
        :rtype: str
        """
        return self._fecha_nacimiento

    @fecha_nacimiento.setter
    def fecha_nacimiento(self, fecha_nacimiento: str):
        """
        Sets the fecha_nacimiento of this Profesor.

        :param fecha_nacimiento: The fecha_nacimiento of this Profesor.
        :type fecha_nacimiento: str
        """

        self._fecha_nacimiento = fecha_nacimiento

    @property
    def investigacion(self) -> int:
        """
        Gets the investigacion of this Profesor.
        horas dedicadas a la investigación

        :return: The investigacion of this Profesor.
        :rtype: int
        """
        return self._investigacion

    @investigacion.setter
    def investigacion(self, investigacion: int):
        """
        Sets the investigacion of this Profesor.
        horas dedicadas a la investigación

        :param investigacion: The investigacion of this Profesor.
        :type investigacion: int
        """

        self._investigacion = investigacion

    @property
    def docencia(self) -> int:
        """
        Gets the docencia of this Profesor.
        horas dedicadas a la docencia

        :return: The docencia of this Profesor.
        :rtype: int
        """
        return self._docencia

    @docencia.setter
    def docencia(self, docencia: int):
        """
        Sets the docencia of this Profesor.
        horas dedicadas a la docencia

        :param docencia: The docencia of this Profesor.
        :type docencia: int
        """

        self._docencia = docencia

    @property
    def categoria(self) -> str:
        """
        Gets the categoria of this Profesor.

        :return: The categoria of this Profesor.
        :rtype: str
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria: str):
        """
        Sets the categoria of this Profesor.

        :param categoria: The categoria of this Profesor.
        :type categoria: str
        """

        self._categoria = categoria

    @property
    def departamento(self) -> int:
        """
        Gets the departamento of this Profesor.
        código del departamento al que pertenece

        :return: The departamento of this Profesor.
        :rtype: int
        """
        return self._departamento

    @departamento.setter
    def departamento(self, departamento: int):
        """
        Sets the departamento of this Profesor.
        código del departamento al que pertenece

        :param departamento: The departamento of this Profesor.
        :type departamento: int
        """

        self._departamento = departamento

    @property
    def usuario(self) -> str:
        """
        Gets the usuario of this Profesor.
        username del loggin

        :return: The usuario of this Profesor.
        :rtype: str
        """
        return self._usuario

    @usuario.setter
    def usuario(self, usuario: str):
        """
        Sets the usuario of this Profesor.
        username del loggin

        :param usuario: The usuario of this Profesor.
        :type usuario: str
        """

        self._usuario = usuario

    @property
    def contrasea(self) -> str:
        """
        Gets the contrasea of this Profesor.
        contraseña del loggin

        :return: The contrasea of this Profesor.
        :rtype: str
        """
        return self._contrasea

    @contrasea.setter
    def contrasea(self, contrasea: str):
        """
        Sets the contrasea of this Profesor.
        contraseña del loggin

        :param contrasea: The contrasea of this Profesor.
        :type contrasea: str
        """

        self._contrasea = contrasea

    @property
    def email(self) -> str:
        """
        Gets the email of this Profesor.
        email del profesor

        :return: The email of this Profesor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this Profesor.
        email del profesor

        :param email: The email of this Profesor.
        :type email: str
        """

        self._email = email

