# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Asignatura(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, asignatura_id: int=None, nombre: str=None, creditos: int=None, tipo: str=None, curso: int=None, semestre: int=None, grado: int=None):
        """
        Asignatura - a model defined in Swagger

        :param asignatura_id: The asignatura_id of this Asignatura.
        :type asignatura_id: int
        :param nombre: The nombre of this Asignatura.
        :type nombre: str
        :param creditos: The creditos of this Asignatura.
        :type creditos: int
        :param tipo: The tipo of this Asignatura.
        :type tipo: str
        :param curso: The curso of this Asignatura.
        :type curso: int
        :param semestre: The semestre of this Asignatura.
        :type semestre: int
        :param grado: The grado of this Asignatura.
        :type grado: int
        """
        self.swagger_types = {
            'asignatura_id': int,
            'nombre': str,
            'creditos': int,
            'tipo': str,
            'curso': int,
            'semestre': int,
            'grado': int
        }

        self.attribute_map = {
            'asignatura_id': 'AsignaturaID',
            'nombre': 'Nombre',
            'creditos': 'Creditos',
            'tipo': 'Tipo',
            'curso': 'Curso',
            'semestre': 'Semestre',
            'grado': 'Grado'
        }

        self._asignatura_id = asignatura_id
        self._nombre = nombre
        self._creditos = creditos
        self._tipo = tipo
        self._curso = curso
        self._semestre = semestre
        self._grado = grado

    @classmethod
    def from_dict(cls, dikt) -> 'Asignatura':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Asignatura of this Asignatura.
        :rtype: Asignatura
        """
        return deserialize_model(dikt, cls)

    @property
    def asignatura_id(self) -> int:
        """
        Gets the asignatura_id of this Asignatura.

        :return: The asignatura_id of this Asignatura.
        :rtype: int
        """
        return self._asignatura_id

    @asignatura_id.setter
    def asignatura_id(self, asignatura_id: int):
        """
        Sets the asignatura_id of this Asignatura.

        :param asignatura_id: The asignatura_id of this Asignatura.
        :type asignatura_id: int
        """

        self._asignatura_id = asignatura_id

    @property
    def nombre(self) -> str:
        """
        Gets the nombre of this Asignatura.

        :return: The nombre of this Asignatura.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """
        Sets the nombre of this Asignatura.

        :param nombre: The nombre of this Asignatura.
        :type nombre: str
        """

        self._nombre = nombre

    @property
    def creditos(self) -> int:
        """
        Gets the creditos of this Asignatura.

        :return: The creditos of this Asignatura.
        :rtype: int
        """
        return self._creditos

    @creditos.setter
    def creditos(self, creditos: int):
        """
        Sets the creditos of this Asignatura.

        :param creditos: The creditos of this Asignatura.
        :type creditos: int
        """

        self._creditos = creditos

    @property
    def tipo(self) -> str:
        """
        Gets the tipo of this Asignatura.
        Obligatoria, optativa o transversal

        :return: The tipo of this Asignatura.
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo: str):
        """
        Sets the tipo of this Asignatura.
        Obligatoria, optativa o transversal

        :param tipo: The tipo of this Asignatura.
        :type tipo: str
        """

        self._tipo = tipo

    @property
    def curso(self) -> int:
        """
        Gets the curso of this Asignatura.

        :return: The curso of this Asignatura.
        :rtype: int
        """
        return self._curso

    @curso.setter
    def curso(self, curso: int):
        """
        Sets the curso of this Asignatura.

        :param curso: The curso of this Asignatura.
        :type curso: int
        """

        self._curso = curso

    @property
    def semestre(self) -> int:
        """
        Gets the semestre of this Asignatura.

        :return: The semestre of this Asignatura.
        :rtype: int
        """
        return self._semestre

    @semestre.setter
    def semestre(self, semestre: int):
        """
        Sets the semestre of this Asignatura.

        :param semestre: The semestre of this Asignatura.
        :type semestre: int
        """

        self._semestre = semestre

    @property
    def grado(self) -> int:
        """
        Gets the grado of this Asignatura.
        C칩digo del grado al que se le quiere a침adir la asignatura

        :return: The grado of this Asignatura.
        :rtype: int
        """
        return self._grado

    @grado.setter
    def grado(self, grado: int):
        """
        Sets the grado of this Asignatura.
        C칩digo del grado al que se le quiere a침adir la asignatura

        :param grado: The grado of this Asignatura.
        :type grado: int
        """

        self._grado = grado

